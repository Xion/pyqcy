{"name":"pyqcy","body":"# pyqcy\r\n_pyqcy_ \\[pyksi:\\] is a test framework that supports unique testing model, inspired by the\r\nbrilliant _QuickCheck_ library for Haskell. Rather than writing fully-fledged test cases,\r\nyou only need to define logical **properties** that your code has to satisfy.\r\nBased on that, _pyqcy_ will automatically generate test cases - hundreds of them, in fact!\r\n\r\n## Example\r\n\r\n```python\r\nfrom pyqcy import qc, int_, main\r\n\r\n@qc\r\ndef addition_actually_works(\r\n    x=int_(min=0), y=int_(min=0)\r\n):\r\n    the_sum = x + y\r\n    assert the_sum >= x and the_sum >= y\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n```\r\n$ python ./example.py\r\naddition_actually_works: passed 100 tests.\r\n```\r\nYes, that's 100 distinct test cases. _pyqcy_ has generated them all for you!\r\n\r\n## Installation\r\n\r\nEither from PyPI:\r\n\r\n```\r\n$ pip install pyqcy\r\n```\r\nor directly from GitHub if you want the bleeding edge version:\r\n\r\n```\r\n$ git clone git://github.com/Xion/pyqcy.git\r\n$ cd pyqcy\r\n$ ./setup.py develop\r\n```\r\n\r\n## Learn more\r\n\r\nCheck out [documentation](http://pyqcy.readthedocs.org) for detailed\r\nusage instructions and more information.\r\n\r\n## Going further\r\n\r\nAlthough already usable, _pyqcy_ is still in development phase.\r\nThe aim is to have it mimic the Haskell's _QuickCheck_ very closely while remaining\r\npythonic and taking advantage of dynamic nature of the language.\r\n\r\nThoughts, opinions, ideas and contributions are all very welcome! Head over to\r\n[GitHub](http://github.com/Xion/pyqcy) for more info.","tagline":"QuickCheck-like testing framework for Python","google":"UA-30641076-1","note":"Don't delete this file! It's used internally to help with page regeneration."}